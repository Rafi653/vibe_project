# Production Docker Compose configuration
# Usage: docker compose -f docker-compose.prod.yml up -d

services:
  postgres:
    image: postgres:16-alpine
    container_name: vibe_postgres_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-vibe_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}
      POSTGRES_DB: ${POSTGRES_DB:-vibe_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-vibe_user} -d ${POSTGRES_DB:-vibe_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - vibe_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: vibe_backend_prod
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-vibe_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-vibe_db}
      - SECRET_KEY=${SECRET_KEY:?SECRET_KEY must be set}
      - ENVIRONMENT=production
      - DEBUG=false
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8000/api/v1/health').read()\""]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: always
    networks:
      - vibe_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: vibe_frontend_prod
    ports:
      - "80:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:80/health || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    restart: always
    networks:
      - vibe_network

volumes:
  postgres_data_prod:

networks:
  vibe_network:
    driver: bridge
